<?php

/**
 * @file
 * Drupal Module: smart_content_segmentio.
 *
 * smart_content_segmentio is the easiest way to integrate analytics into your Drupal site.
 * By installing smart_content_segmentio's Drupal plugin you can add any analytics service
 * to your site without touching any code.
 */

use Drupal\Core\Entity\EntityInterface;
use Pantheon\EI\HeaderData;

/**
 * Implements hook_page_attachments().
 */
function smart_content_segmentio_page_attachments(&$build) {
  $tracking = TRUE;

  // Disable tracking for visitors who have opted out via DNT header.
  if (\Drupal::config('smart_content_segmentio.settings')->get('smart_content_segmentio_privacy') && !empty($_SERVER['HTTP_DNT'])) {
    $tracking = FALSE;
  }
  if ($tracking) {
    $write_key = \Drupal::config('smart_content_segmentio.settings')->get('smart_content_segmentio_write_key');
    if (empty($write_key)) {
      // Severity is emergency since the smart_content_segmentio system would be unusable.
      \Drupal::logger('smart_content_segmentio')->emergency('No Write Key has been Configured for smart_content_segmentio', []);
    }
    else {
      $variables = [];

      // Retrieve any set tracking events.
      $variables['track'] = smart_content_segmentio_get_track_events(TRUE);

      // Get categories
      $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

      // Get header data.
      $smart_content_cdn = new HeaderData();
      $p_obj = $smart_content_cdn->returnPersonalizationObject();

      // Add labels for interest terms to $p_obj.
      if (!empty($p_obj['Interest'])) {
        foreach ($p_obj['Interest'] as $tid) {
          // Load taxonomy term by tid.
          $term = $term_storage->load($tid);
          if (!empty($term)) {
            // Add label for taxonomy term.
            $variables['identify']['traits']['interests'][] = strtolower($term->label());
          }
        }
      }

      if (!empty($p_obj['Audience']) && !empty($p_obj['Audience-Set'])) {
        $variables['identify']['traits']['geo'] = strtolower($p_obj['Audience']['geo']);
        $variables['identify']['traits']['city'] = strtolower($p_obj['Audience-Set']['city']);
        $variables['identify']['traits']['conn-speed'] = strtolower($p_obj['Audience-Set']['conn-speed']);
        $variables['identify']['traits']['conn-type'] = strtolower($p_obj['Audience-Set']['conn-type']);
        $variables['identify']['traits']['continent'] = strtolower($p_obj['Audience-Set']['continent']);
        $variables['identify']['traits']['country'] = strtolower($p_obj['Audience-Set']['country']);
        $variables['identify']['traits']['region'] = strtolower($p_obj['Audience-Set']['region']);
      }

      // Set pObj to pass into JavaScript.
      //$variables['page']['properties'] = $p_obj;
      //\Drupal::logger('smart_content_segmentio')->info('Objects to track' . $p_obj, []);

      // Retrieve any additional settings.
      $track = \Drupal::config('smart_content_segmentio.settings')->get('smart_content_segmentio_track');
      foreach ($track as $function => $enabled) {
        if ($enabled) {
          list($module, $hook) = explode(':', $function);
          $function = $module . '_' . $hook;
          $function($variables);
        }
      }

      $build['#attached']['library'][] = 'smart_content_segmentio/smart_content_segmentio';
      $build['#attached']['drupalSettings']['smart_content_segmentio']['smart_content_segmentio']['write_key'] = $write_key;
      $build['#attached']['drupalSettings']['smart_content_segmentio']['smart_content_segmentio']['variables'] = $variables;
    }
  }
}

/**
 * Implements hook_smart_content_segmentio_info().
 */
function smart_content_segmentio_smart_content_segmentio_info() {
  return [
    'smart_content_segmentio:smart_content_segmentio_user' => t('User'),
    'smart_content_segmentio:smart_content_segmentio_node' => t('Node'),
  ];
}

/**
 * Segment.io callback; Retrieve Segment code for the logged in user.
 */
function smart_content_segmentio_smart_content_segmentio_user(&$variables = []) {
  $user = \Drupal::currentUser();
  if ($user) {
    $variables['identify']['userId'] = $user->id();
    $variables['identify']['traits']['name'] = $user->getAccountName();
    $variables['identify']['traits']['email'] = $user->getEmail();
  }
}

/**
 * Retrieve information from certain node views.
 */
function smart_content_segmentio_smart_content_segmentio_node(&$variables = []) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $variables['page']['category'] = $node->getType();
    $variables['page']['name'] = $node->getTitle();
    $variables['page']['properties']['nid'] = $node->id();
    $variables['page']['properties']['uid'] = $node->getOwner()->id();
    if (isset($node->name)) {
      $variables['page']['properties']['name'] = $node->name;
    }
    $variables['page']['properties']['keywords'] = smart_content_segmention_get_page_terms($node->id());
  }
}

/**
 * Set a tracking event.
 */
function smart_content_segmentio_set_track_event($event = NULL, $properties = [], $options = [], $callback = NULL) {
  if (isset($event)) {
    if (!isset($_SESSION['smart_content_segmentio'])) {
      $_SESSION['smart_content_segmentio'] = [];
    }
    $track_event = [
      'event' => $event,
    ];
    if (!empty($properties)) {
      $track_event['properties'] = $properties;
    }
    if (!empty($options)) {
      $track_event['options'] = $options;
    }
    if (isset($callback)) {
      $track_event['callback'] = $callback;
    }
    $_SESSION['smart_content_segmentio'][] = $track_event;

    // Mark this page as being uncacheable.
    \Drupal::service('page_cache_kill_switch')->trigger();
  }
  return isset($_SESSION['smart_content_segmentio']) ? $_SESSION['smart_content_segmentio'] : NULL;
}

/**
 * Retrieve a tracking event.
 */
function smart_content_segmentio_get_track_events($clear_queue = TRUE) {
  if ($events = smart_content_segmentio_set_track_event()) {
    if ($clear_queue) {
      unset($_SESSION['smart_content_segmentio']);
    }
    if (isset($events)) {
      return $events;
    }
  }
  return [];
}

/**
 * Retrieve terms.
 */
function smart_content_segmention_get_page_terms(int $nid) {

  // Iterate through each field on the node entity to get all the tagged
  // taxonomy terms on the node.
  // $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
  $terms = [];
  
  foreach ($node->getFields() as $key => $field) {
    if ($field->getFieldDefinition()->getType() == 'entity_reference') {
      $targetType = $field->getFieldDefinition()
        ->getItemDefinition()
        ->getSetting('target_type');
      if ($targetType == 'taxonomy_term') {
        $new_terms = array_map(function (\Drupal\taxonomy\TermInterface $term) {
          return $term->label();
        }, $field->referencedEntities());
        $terms = array_merge($terms, $new_terms);
      }
    }
  } if (isset($terms)) {
    return $terms;
  }
  return [];
}